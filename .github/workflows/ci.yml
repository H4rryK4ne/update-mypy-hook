on: push

env:
  UV_VERSION: 0.7.8

jobs:
  lint:
    name: lint
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        persist-credentials: false

    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        version: "${{ env.UV_VERSION }}"

    - name: "Set up Python"
      uses: actions/setup-python@v5
      with:
        python-version-file: ".python-version"

    - name: Install the project
      run: uv sync --locked --dev

    - name: Run lint checks
      run: uv run ruff check --output-format=github .

    - name: Run format checks
      run: uv run ruff format --diff

  mypy:
    name: mypy
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        persist-credentials: false

    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        version: "${{ env.UV_VERSION }}"

    - name: "Set up Python"
      uses: actions/setup-python@v5
      with:
        python-version-file: ".python-version"

    - name: Install the project
      run: uv sync --locked --group mypy

    - name: Run lint checks
      run: uv run mypy .

  build:
    name: Build distribution 📦
    runs-on: ubuntu-latest

    needs:
    - lint
    - mypy

    steps:
    - uses: actions/checkout@v4
      with:
        persist-credentials: false

    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        version: "${{ env.UV_VERSION }}"
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version-file: ".python-version"

    - uses: benjlevesque/short-sha@v3.0
      id: short-sha

    - name: Set dev version if not master
      if: github.ref_name != 'master'
      run: uv version $(uv version --short).dev${{ github.run_id }}+${{ env.SHA }}

    - name: Build a binary wheel and a source tarball
      run: uv build
    - name: Store the distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: |
          dist/*.whl
          dist/*.tar.gz

  publish-to-pypi:
    name: >-
      Publish Python 🐍 distribution 📦 to PyPI
    if: startsWith(github.ref, 'refs/tags/v')  # only publish to PyPI on tag pushes starting with 'v'
    needs:
    - build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/update-mypy-hook  # Replace <package-name> with your PyPI project name
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish distribution 📦 to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

  publish-to-testpypi:
    name: Publish Python 🐍 distribution 📦 to TestPyPI
    if: github.ref_name == 'develop'
    needs:
    - build
    runs-on: ubuntu-latest

    environment:
      name: testpypi
      url: https://test.pypi.org/p/update-mypy-hook

    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish distribution 📦 to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
