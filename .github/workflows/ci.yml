on: push

env:
  UV_VERSION: 0.7.8

jobs:
  lint:
    name: lint
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        persist-credentials: false

    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        version: "${{ env.UV_VERSION }}"

    - name: "Set up Python"
      uses: actions/setup-python@v5
      with:
        python-version-file: ".python-version"

    - name: Install the project
      run: uv sync --locked --dev

    - name: Run lint checks
      run: uv run ruff check --output-format=github .

    - name: Run format checks
      run: uv run ruff format --diff

  mypy:
    name: mypy
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        persist-credentials: false

    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        version: "${{ env.UV_VERSION }}"

    - name: "Set up Python"
      uses: actions/setup-python@v5
      with:
        python-version-file: ".python-version"

    - name: Install the project
      run: uv sync --locked --group mypy

    - name: Run lint checks
      run: uv run mypy .

  build:
    name: Build distribution 📦
    runs-on: ubuntu-latest
    needs:
    - lint
    - mypy

    steps:
    - uses: actions/checkout@v4
      with:
        persist-credentials: false
    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        version: "${{ env.UV_VERSION }}"
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version-file: ".python-version"
    - name: Set dev version if not master
      if: github.ref_name != 'master'
      run: uv version $(uv version --short).dev${{ github.run_id }}
    - name: Save version for later jobs
      id: store_version
      run: echo "version=$(uv version --short)" >> $GITHUB_OUTPUT
    - name: Build a binary wheel and a source tarball
      run: uv build
    - name: Store the distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    outputs:
      version: ${{steps.store_version.outputs.version}}

  create-release:
    name: Create a GitHub release
    runs-on: ubuntu-latest
    if: github.ref_name == 'develop'
    needs:
    - build
    permissions:
      contents: write
    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.build.outputs.version }}
        name: Release v${{ needs.build.outputs.version }}
        files: |
          dist/*.whl
          dist/*.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-to-pypi:
    name: >-
      Publish Python 🐍 distribution 📦 to PyPI
    needs:
    - build
    - create-release
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/p/update-mypy-hook  # Replace <package-name> with your PyPI project name
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - uses: actions/checkout@v4
      with:
        persist-credentials: false
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        version: "${{ env.UV_VERSION }}"
    - name: Publish distribution 📦 to PyPI
      run: uv publish --index testpypi

#  publish-to-testpypi:
#    name: Publish Python 🐍 distribution 📦 to TestPyPI
#    if: github.ref_name == 'develop'
#    needs:
#    - build
#    runs-on: ubuntu-latest
#
#    environment:
#      name: testpypi
#      url: https://test.pypi.org/p/update-mypy-hook
#
#    permissions:
#      id-token: write  # IMPORTANT: mandatory for trusted publishing
#
#    steps:
#    - uses: actions/checkout@v4
#      with:
#        persist-credentials: false
#    - name: Download all the dists
#      uses: actions/download-artifact@v4
#      with:
#        name: python-package-distributions
#        path: dist/
#    - name: Install uv
#      uses: astral-sh/setup-uv@v5
#      with:
#        version: "${{ env.UV_VERSION }}"
#    - name: Publish distribution 📦 to TestPyPI
#      run: uv publish --index testpypi
